name: 创建临时构建

env:
  APP_NAME: cursorHelper
  EXE_NAME: cursorHelper.exe
  ARTIFACT_NAME: cursorHelper-Windows-Temp
  PYTHON_VERSION: '3.11'
  CACHE_VERSION: v1

on:
  workflow_dispatch:
    inputs:
      expiry_days:
        description: '构建产物保留天数'
        required: true
        default: '7'
        type: number

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: 配置Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git checkout $env:GITHUB_SHA

      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller wheel setuptools
          pip install -r requirements.txt

      - name: 缓存PyInstaller构建
        uses: actions/cache@v4
        with:
          path: |
            build
            dist
            *.spec
          key: ${{ runner.os }}-pyinstaller-temp-${{ env.CACHE_VERSION }}-${{ hashFiles('**/*.py', '**/*.spec', 'requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pyinstaller-temp-${{ env.CACHE_VERSION }}-

      - name: 构建可执行文件
        run: |
          pyinstaller ${{ env.APP_NAME }}.spec --clean

      - name: 验证构建
        run: |
          Write-Host "当前工作目录: $PWD"
          Write-Host "目录内容:"
          Get-ChildItem -Force
          
          Write-Host "`ndist 目录内容:"
          if (Test-Path dist) {
            Get-ChildItem dist -Force
          } else {
            throw "dist 目录不存在!"
          }
          
          $exePath = "dist\${{ env.EXE_NAME }}"
          if (Test-Path $exePath) {
            $fileSize = (Get-Item $exePath).Length
            Write-Host "`n构建文件信息:"
            Write-Host "路径: $exePath"
            Write-Host "大小: $([math]::Round($fileSize/1MB, 2)) MB"
          
            if ($fileSize -lt 1MB) {
              throw "构建文件过小，可能存在问题"
            }
          } else {
            Write-Host "`n构建目录结构:"
            Get-ChildItem -Recurse | Select-Object FullName
            throw "未在预期路径找到可执行文件: $exePath"
          }

      - name: 创建.env文件
        run: |
          cd dist
          @"
          DOMAIN=
          EMAIL=
          PASSWORD=
          COOKIES_STR=
          API_KEY=
          MOE_MAIL_URL=
          "@ | Out-File -FilePath .env -Encoding UTF8

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            dist/${{ env.EXE_NAME }}
            dist/.env
          retention-days: ${{ inputs.expiry_days }}

  cleanup:
    needs: [ build-windows ]
    runs-on: ubuntu-latest
    if: always()
    permissions:
      actions: write
    steps:
      - name: 清除缓存
        run: |
          gh extension install actions/gh-actions-cache
          
          REPO=${{ github.repository }}
          BRANCH=${{ github.ref }}
          
          echo "获取缓存列表..."
          cacheKeys=$(gh actions-cache list --repo $REPO --branch $BRANCH --limit 100 | cut -f 1)
          
          echo "开始清除缓存..."
          for cacheKey in $cacheKeys; do
            gh actions-cache delete $cacheKey --repo $REPO --branch $BRANCH --confirm
            echo "已删除缓存: $cacheKey"
          done
          echo "缓存清理完成"
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }} 